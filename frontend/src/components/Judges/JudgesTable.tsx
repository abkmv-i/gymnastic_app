import React, { useState } from 'react';
import axios from 'axios';
import { Judge, JudgesTableProps, JudgeRole } from '../../models/types';
import '../../styles/common.css';

const JudgesTable: React.FC<JudgesTableProps> = ({ judges, competitionId, onUpdate }) => {
  const [newJudgeName, setNewJudgeName] = useState('');
  const [newJudgeRole, setNewJudgeRole] = useState<JudgeRole>('A1');
  const [editingId, setEditingId] = useState<number | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [judgeToDelete, setJudgeToDelete] = useState<Judge | null>(null);
  const [credentials, setCredentials] = useState<{ login: string, password?: string } | null>(null);

  const resetForm = () => {
    setNewJudgeName('');
    setNewJudgeRole('A1');
    setEditingId(null);
    setIsEditing(false);
    setCredentials(null);
  };

  const handleAddOrUpdateJudge = async () => {
    if (!newJudgeName.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—É–¥—å–∏');
      return;
    }

    try {
      if (isEditing && editingId !== null) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
        await axios.put(`http://localhost:8080/judges/competitions/${competitionId}/judges/${editingId}`, {
          role: newJudgeRole
        });
      } else {
        // 1. –°–æ–∑–¥–∞—ë–º —Å—É–¥—å—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const createRes = await axios.post('http://localhost:8080/judges', {
          name: newJudgeName
        });
        const { judge, login, password } = createRes.data;
        const judgeId = judge.id;

        // 2. –ù–∞–∑–Ω–∞—á–∞–µ–º —Å—É–¥—å—é –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ
        await axios.post('http://localhost:8080/judges/assign', {
          judge_id: judgeId,
          competition_id: competitionId,
          role: newJudgeRole
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
        setCredentials({ login, password });
      }

      onUpdate();
      setNewJudgeName('');
      setNewJudgeRole('A1');
      setEditingId(null);
      setIsEditing(false);
    } catch (err) {
      console.error(err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—É–¥—å–∏');
    }
  };

  const handleEditJudge = (judge: Judge) => {
    setNewJudgeName(judge.name);
    setNewJudgeRole(judge.role);
    setEditingId(judge.id);
    setIsEditing(true);
    setCredentials(null);
  };

  const confirmDeleteJudge = () => {
    if (judgeToDelete) {
      axios.delete(`http://localhost:8080/judges/${competitionId}/${judgeToDelete.id}`)
        .then(() => {
          onUpdate();
          setShowDeleteModal(false);
          setJudgeToDelete(null);
        })
        .catch(() => alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—É–¥—å–∏'));
    }
  };

  const cancelDelete = () => {
    setShowDeleteModal(false);
    setJudgeToDelete(null);
  };

  const judgeRoles: JudgeRole[] = ['A1', 'A2', 'A3', 'A4', 'E1', 'E2', 'E3', 'E4', 'DA1', 'DA2',  'DB1', 'DB2', '–ª–∏–Ω–µ–π–Ω—ã–π —Å—É–¥—å—è', '—Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∏—Å—Ç', '–≥–ª–∞–≤–Ω—ã–π —Å—É–¥—å—è', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'];

  return (
    <div className="section-container">
      <div className="form-grid">
        <h4>{isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–¥—å—é' : '–î–æ–±–∞–≤–∏—Ç—å —Å—É–¥—å—é'}</h4>
        <input
          type="text"
          placeholder="–ò–º—è —Å—É–¥—å–∏"
          value={newJudgeName}
          onChange={(e) => setNewJudgeName(e.target.value)}
        />
        <select
          value={newJudgeRole}
          onChange={(e) => setNewJudgeRole(e.target.value as JudgeRole)}
        >
          {judgeRoles.map(role => (
            <option key={role} value={role}>{role}</option>
          ))}
        </select>
        <button className="btn add" onClick={handleAddOrUpdateJudge}>
          {isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
        </button>
        {isEditing && <button className="btn cancel-btn" onClick={resetForm}>–û—Ç–º–µ–Ω–∞</button>}

        {credentials && (
          <div className="credentials-info">
            <p><strong>–õ–æ–≥–∏–Ω:</strong> {credentials.login}</p>
            {credentials.password && <p><strong>–ü–∞—Ä–æ–ª—å:</strong> {credentials.password}</p>}
          </div>
        )}
      </div>

      <div className="table-container">
        <table className="common-table">
          <thead>
            <tr>
              <th>–ò–º—è</th>
              <th>–†–æ–ª—å</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {judges.map(judge => (
              <tr key={judge.id}>
                <td>{judge.name}</td>
                <td>{judge.role}</td>
                <td className="actions-cell">
                  <button className="btn small edit" onClick={() => handleEditJudge(judge)}>‚úèÔ∏è</button>
                  <button className="btn small delete" onClick={() => {
                    setJudgeToDelete(judge);
                    setShowDeleteModal(true);
                  }}>üóëÔ∏è</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {showDeleteModal && judgeToDelete && (
        <div className="modal-backdrop">
          <div className="modal">
            <h2>–£–¥–∞–ª–∏—Ç—å —Å—É–¥—å—é {judgeToDelete.name}?</h2>
            <div className="modal-buttons">
              <button className="cancel" onClick={cancelDelete}>–û—Ç–º–µ–Ω–∞</button>
              <button className="confirm" onClick={confirmDeleteJudge}>–£–¥–∞–ª–∏—Ç—å</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default JudgesTable;
