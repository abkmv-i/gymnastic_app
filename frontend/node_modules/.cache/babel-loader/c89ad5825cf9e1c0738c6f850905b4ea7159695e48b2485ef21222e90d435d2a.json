{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// // Описываем тип данных, возвращаемых сервером из таблицы results\n// interface ProtocolRow {\n//   id: number;\n//   gymnast_id: number;\n//   competition_id: number;\n//   total_score: string; // Или number, если вы приводите в число\n//   rank: number;\n//   a_score: string;\n//   e_score: string;\n//   da_score: string;\n//   created_at: string; // Можно преобразовать в Date при желании\n// }\n\n// const CompetitionResults: React.FC = () => {\n//   const { id } = useParams(); // competition ID из URL\n//   const navigate = useNavigate();\n\n//   const [results, setResults] = useState<ProtocolRow[]>([]);\n//   const [loading, setLoading] = useState<boolean>(true);\n//   const [error, setError] = useState<string>(\"\");\n\n//   useEffect(() => {\n//     if (id) {\n//       fetchProtocols(id);\n//     }\n//   }, [id]);\n\n//   // Запрос на бэкенд для получения результатов (протоколов)\n//   const fetchProtocols = async (competitionId: string) => {\n//     try {\n//       const response = await axios.get<ProtocolRow[]>(\n//         `http://localhost:8080/results/protocols?competition_id=${competitionId}`\n//       );\n//       setResults(response.data);\n//     } catch (err) {\n//       console.error(\"Ошибка при получении протоколов:\", err);\n//       setError(\"Не удалось загрузить протоколы.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Переход на страницу соревнования\n//   const handleGoToCompetition = () => {\n//     if (id) {\n//       navigate(`/competition/${id}`);\n//     }\n//   };\n\n//   // Переход на страницу судейства\n//   const handleGoToJudging = () => {\n//     if (id) {\n//       navigate(`/competition/${id}/judge`);\n//     }\n//   };\n\n//   if (loading) {\n//     return <p>Загрузка результатов...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   return (\n//     <div>\n//       <h2>Результаты соревнования (ID: {id})</h2>\n\n//       {results.length === 0 ? (\n//         <p>Пока нет данных о результатах.</p>\n//       ) : (\n//         <table border={1} cellPadding={5} style={{ borderCollapse: \"collapse\" }}>\n//           <thead>\n//             <tr>\n//               <th>Место (rank)</th>\n//               <th>Гимнастка (gymnast_id)</th>\n//               <th>Общая оценка (total_score)</th>\n//               <th>A_score</th>\n//               <th>E_score</th>\n//               <th>DA_score</th>\n//               <th>Дата создания (created_at)</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {results.map((row) => (\n//               <tr key={row.id}>\n//                 <td>{row.rank}</td>\n//                 <td>{row.gymnast_id}</td>\n//                 <td>{row.total_score}</td>\n//                 <td>{row.a_score}</td>\n//                 <td>{row.e_score}</td>\n//                 <td>{row.da_score}</td>\n//                 <td>{new Date(row.created_at).toLocaleString()}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div style={{ marginTop: \"20px\" }}>\n//         <button onClick={handleGoToCompetition}>К соревнованию</button>\n//         <button onClick={handleGoToJudging} style={{ marginLeft: \"10px\" }}>\n//           Судить\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CompetitionResults;","map":{"version":3,"names":[],"sources":["/Users/irinaabakumova/gymnastic_app/frontend/src/pages/CompetitionResults.tsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// // Описываем тип данных, возвращаемых сервером из таблицы results\n// interface ProtocolRow {\n//   id: number;\n//   gymnast_id: number;\n//   competition_id: number;\n//   total_score: string; // Или number, если вы приводите в число\n//   rank: number;\n//   a_score: string;\n//   e_score: string;\n//   da_score: string;\n//   created_at: string; // Можно преобразовать в Date при желании\n// }\n\n// const CompetitionResults: React.FC = () => {\n//   const { id } = useParams(); // competition ID из URL\n//   const navigate = useNavigate();\n\n//   const [results, setResults] = useState<ProtocolRow[]>([]);\n//   const [loading, setLoading] = useState<boolean>(true);\n//   const [error, setError] = useState<string>(\"\");\n\n//   useEffect(() => {\n//     if (id) {\n//       fetchProtocols(id);\n//     }\n//   }, [id]);\n\n//   // Запрос на бэкенд для получения результатов (протоколов)\n//   const fetchProtocols = async (competitionId: string) => {\n//     try {\n//       const response = await axios.get<ProtocolRow[]>(\n//         `http://localhost:8080/results/protocols?competition_id=${competitionId}`\n//       );\n//       setResults(response.data);\n//     } catch (err) {\n//       console.error(\"Ошибка при получении протоколов:\", err);\n//       setError(\"Не удалось загрузить протоколы.\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   // Переход на страницу соревнования\n//   const handleGoToCompetition = () => {\n//     if (id) {\n//       navigate(`/competition/${id}`);\n//     }\n//   };\n\n//   // Переход на страницу судейства\n//   const handleGoToJudging = () => {\n//     if (id) {\n//       navigate(`/competition/${id}/judge`);\n//     }\n//   };\n\n//   if (loading) {\n//     return <p>Загрузка результатов...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   return (\n//     <div>\n//       <h2>Результаты соревнования (ID: {id})</h2>\n\n//       {results.length === 0 ? (\n//         <p>Пока нет данных о результатах.</p>\n//       ) : (\n//         <table border={1} cellPadding={5} style={{ borderCollapse: \"collapse\" }}>\n//           <thead>\n//             <tr>\n//               <th>Место (rank)</th>\n//               <th>Гимнастка (gymnast_id)</th>\n//               <th>Общая оценка (total_score)</th>\n//               <th>A_score</th>\n//               <th>E_score</th>\n//               <th>DA_score</th>\n//               <th>Дата создания (created_at)</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {results.map((row) => (\n//               <tr key={row.id}>\n//                 <td>{row.rank}</td>\n//                 <td>{row.gymnast_id}</td>\n//                 <td>{row.total_score}</td>\n//                 <td>{row.a_score}</td>\n//                 <td>{row.e_score}</td>\n//                 <td>{row.da_score}</td>\n//                 <td>{new Date(row.created_at).toLocaleString()}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n\n//       <div style={{ marginTop: \"20px\" }}>\n//         <button onClick={handleGoToCompetition}>К соревнованию</button>\n//         <button onClick={handleGoToJudging} style={{ marginLeft: \"10px\" }}>\n//           Судить\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CompetitionResults;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}